import{Address as rt,TransactionsFactoryConfig as Gt,TransferTransactionsFactory as Kt}from"@multiversx/sdk-core";import Jt from"ajv";var g={ProtocolNameWarp:"warp",ProtocolNameBrand:"warp-brand",LatestProtocolVersion:"0.5.0",LatestWarpSchemaUrl:"https://raw.githubusercontent.com/vLeapGroup/warps-specs/refs/heads/main/schemas/v0.5.0.schema.json",LatestBrandSchemaUrl:"https://raw.githubusercontent.com/vLeapGroup/warps-specs/refs/heads/main/schemas/brand/v0.1.0.schema.json",DefaultClientUrl:a=>a==="devnet"?"https://devnet.usewarp.to":a==="testnet"?"https://testnet.usewarp.to":"https://usewarp.to",SuperClientUrls:["https://usewarp.to","https://testnet.usewarp.to","https://devnet.usewarp.to"],Chain:{ApiUrl:a=>a==="devnet"?"https://devnet-api.multiversx.com":a==="testnet"?"https://testnet-api.multiversx.com":"https://api.multiversx.com"},Registry:{Contract:a=>a==="devnet"?"erd1qqqqqqqqqqqqqpgqje2f99vr6r7sk54thg03c9suzcvwr4nfl3tsfkdl36":a==="testnet"?"####":"erd1qqqqqqqqqqqqqpgq3mrpj3u6q7tejv6d7eqhnyd27n9v5c5tl3ts08mffe"},AvailableActionInputSources:["field","query"],AvailableActionInputTypes:["string","uint8","uint16","uint32","uint64","biguint","boolean","address"],AvailableActionInputPositions:["value","arg:1","arg:2","arg:3","arg:4","arg:5","arg:6","arg:7","arg:8","arg:9","arg:10"]};var T=a=>a==="devnet"?"D":a==="testnet"?"T":"1",B=a=>`${a}:${g.LatestProtocolVersion}`,Ee=(a,t)=>a?.actions[t-1],v=a=>({hash:a.hash.toString("hex"),alias:a.alias?.toString()||null,trust:a.trust.toString(),creator:a.creator.toString(),createdAt:a.created_at.toNumber(),brand:a.brand?.toString("hex")||null,upgrade:a.upgrade?.toString("hex")||null}),x=(a,t)=>{let e=a.toString(),[r,i=""]=e.split("."),n=Math.abs(t);if(t>0)return BigInt(r+i.padEnd(n,"0"));if(t<0){let s=r+i;if(n>=s.length)return 0n;let o=s.slice(0,-n)||"0";return BigInt(o)}else return BigInt(a)},J=(a,t=100)=>{if(!a)return"";let e=a.replace(/<\/?(h[1-6])[^>]*>/gi," - ").replace(/<\/?(p|div|ul|ol|li|br|hr)[^>]*>/gi," ").replace(/<[^>]+>/g,"").replace(/\s+/g," ").trim();return e=e.startsWith("- ")?e.slice(2):e,e=e.length>t?e.substring(0,e.lastIndexOf(" ",t))+"...":e,e};import{ApiNetworkProvider as Mt}from"@multiversx/sdk-core/out";var u={HttpProtocolPrefix:"http",IdentifierParamName:"warp",IdentifierParamSeparator:":",DefaultIdentifierType:"alias",ArgParamsSeparator:":",ArgCompositeSeparator:"|",Egld:{Identifier:"EGLD",DisplayName:"eGold",Decimals:18}};import jt from"qr-code-styling";import{Address as Z,TransactionsFactoryConfig as Ot,TransferTransactionsFactory as Lt}from"@multiversx/sdk-core";var C={Warp:a=>`warp:${a}`,RegistryInfo:a=>`registry-info:${a}`,Brand:a=>`brand:${a}`},W=class{constructor(){this.cache=new Map}set(t,e,r){let i=Date.now()+r*1e3;this.cache.set(t,{value:e,expiresAt:i})}get(t){let e=this.cache.get(t);return e?Date.now()>e.expiresAt?(this.cache.delete(t),null):e.value:null}clear(){this.cache.clear()}};import $t from"ajv";var A=class{constructor(t){this.config=t;this.config=t}async validate(t){this.ensureMaxOneValuePosition(t),await this.ensureValidSchema(t)}ensureMaxOneValuePosition(t){if(t.actions.filter(r=>"position"in r?r.position==="value":!1).length>1)throw new Error("WarpBuilder: only one value position action is allowed")}async ensureValidSchema(t){let e=this.config.warpSchemaUrl||g.LatestWarpSchemaUrl,i=await(await fetch(e)).json(),n=new $t,s=n.compile(i);if(!s(t))throw new Error(`WarpBuilder: schema validation failed: ${n.errorsText(s.errors)}`)}};var S=class{constructor(t){this.cache=new W;this.pendingWarp={protocol:B(g.ProtocolNameWarp),name:"",title:"",description:null,preview:"",actions:[]};this.config=t}createInscriptionTransaction(t){if(!this.config.userAddress)throw new Error("WarpBuilder: user address not set");let e=new Ot({chainID:T(this.config.env)}),r=new Lt({config:e}),i=JSON.stringify(t),n=r.createTransactionForTransfer({sender:Z.newFromBech32(this.config.userAddress),receiver:Z.newFromBech32(this.config.userAddress),nativeAmount:BigInt(0),data:Buffer.from(i).valueOf()});return n.gasLimit=n.gasLimit+BigInt(2e6),n}async createFromRaw(t,e=!0){let r=JSON.parse(t);return e&&await new A(this.config).validate(r),f.prepareVars(r,this.config)}async createFromTransaction(t,e=!1){let r=await this.createFromRaw(t.data.toString(),e);return r.meta={hash:t.hash,creator:t.sender.bech32(),createdAt:new Date(t.timestamp*1e3).toISOString()},r}async createFromTransactionHash(t,e){let r=C.Warp(t);if(e){let n=this.cache.get(r);if(n)return console.log(`WarpBuilder (createFromTransactionHash): Warp found in cache: ${t}`),n}let i=f.getConfiguredChainApi(this.config);try{let n=await i.getTransaction(t),s=await this.createFromTransaction(n);return e&&e.ttl&&s&&this.cache.set(r,s,e.ttl),s}catch(n){return console.error("WarpBuilder: Error creating from transaction hash",n),null}}setName(t){return this.pendingWarp.name=t,this}setTitle(t){return this.pendingWarp.title=t,this}setDescription(t){return this.pendingWarp.description=t,this}setPreview(t){return this.pendingWarp.preview=t,this}setActions(t){return this.pendingWarp.actions=t,this}addAction(t){return this.pendingWarp.actions.push(t),this}async build(){return this.ensure(this.pendingWarp.protocol,"protocol is required"),this.ensure(this.pendingWarp.name,"name is required"),this.ensure(this.pendingWarp.title,"title is required"),this.ensure(this.pendingWarp.actions.length>0,"actions are required"),await new A(this.config).validate(this.pendingWarp),this.pendingWarp}getDescriptionPreview(t,e=100){return J(t,e)}ensure(t,e){if(!t)throw new Error(`WarpBuilder: ${e}`)}};import{AbiRegistry as X,Address as m,AddressValue as Y,BytesValue as y,QueryRunnerAdapter as Dt,SmartContractQueriesController as _t,SmartContractTransactionsFactory as Qt,TransactionsFactoryConfig as Ht}from"@multiversx/sdk-core/out";var N={buildInfo:{rustc:{version:"1.80.0-nightly",commitHash:"791adf759cc065316f054961875052d5bc03e16c",commitDate:"2024-05-21",channel:"Nightly",short:"rustc 1.80.0-nightly (791adf759 2024-05-21)"},contractCrate:{name:"registry",version:"0.0.1"},framework:{name:"multiversx-sc",version:"0.51.1"}},name:"RegistryContract",constructor:{inputs:[{name:"unit_price",type:"BigUint"},{name:"vault",type:"Address"}],outputs:[]},upgradeConstructor:{inputs:[],outputs:[]},endpoints:[{name:"registerWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"},{name:"alias_opt",type:"optional<bytes>",multi_arg:!0},{name:"brand_opt",type:"optional<bytes>",multi_arg:!0}],outputs:[],allow_multiple_var_args:!0},{name:"unregisterWarp",mutability:"mutable",inputs:[{name:"warp",type:"bytes"}],outputs:[]},{name:"upgradeWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"alias",type:"bytes"},{name:"new_warp",type:"bytes"}],outputs:[]},{name:"setWarpAlias",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"},{name:"alias",type:"bytes"}],outputs:[]},{name:"publishWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"}],outputs:[]},{name:"getUserWarps",mutability:"readonly",inputs:[{name:"address",type:"Address"}],outputs:[{type:"variadic<InfoView>",multi_result:!0}]},{name:"getInfoByAlias",mutability:"readonly",inputs:[{name:"alias",type:"bytes"}],outputs:[{type:"InfoView"}]},{name:"getInfoByHash",mutability:"readonly",inputs:[{name:"hash",type:"bytes"}],outputs:[{type:"InfoView"}]},{name:"setVault",onlyOwner:!0,mutability:"mutable",inputs:[{name:"vault",type:"Address"}],outputs:[]},{name:"setUnitPrice",onlyOwner:!0,mutability:"mutable",inputs:[{name:"amount",type:"BigUint"}],outputs:[]},{name:"getConfig",mutability:"readonly",inputs:[],outputs:[{type:"BigUint"}]},{name:"registerBrand",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"}],outputs:[]},{name:"brandWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"warp",type:"bytes"},{name:"brand",type:"bytes"}],outputs:[]},{name:"getUserBrands",mutability:"readonly",inputs:[{name:"user",type:"Address"}],outputs:[{type:"variadic<bytes>",multi_result:!0}]}],events:[{identifier:"warpRegistered",inputs:[{name:"hash",type:"bytes",indexed:!0},{name:"alias",type:"bytes",indexed:!0}]},{identifier:"warpUnregistered",inputs:[{name:"hash",type:"bytes",indexed:!0}]},{identifier:"warpUpgraded",inputs:[{name:"alias",type:"bytes",indexed:!0},{name:"new_warp",type:"bytes",indexed:!0}]},{identifier:"warpPublished",inputs:[{name:"hash",type:"bytes",indexed:!0}]},{identifier:"aliasUpdated",inputs:[{name:"hash",type:"bytes",indexed:!0},{name:"alias",type:"bytes",indexed:!0}]}],esdtAttributes:[],hasCallback:!1,types:{InfoView:{type:"struct",fields:[{name:"hash",type:"bytes"},{name:"alias",type:"Option<bytes>"},{name:"trust",type:"bytes"},{name:"creator",type:"Address"},{name:"created_at",type:"u64"},{name:"brand",type:"Option<bytes>"},{name:"upgrade",type:"Option<bytes>"}]}}};var V=class{constructor(t){this.cache=new W;this.config=t,this.unitPrice=BigInt(0)}async init(){await this.loadRegistryConfigs()}createWarpRegisterTransaction(t,e){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");let r=e?this.unitPrice*BigInt(2):this.unitPrice;return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"registerWarp",gasLimit:BigInt(1e7),nativeTransferAmount:r,arguments:e?[y.fromHex(t),y.fromUTF8(e)]:[y.fromHex(t)]})}createWarpUnregisterTransaction(t){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"unregisterWarp",gasLimit:BigInt(1e7),arguments:[y.fromHex(t)]})}createWarpUpgradeTransaction(t,e){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"upgradeWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[y.fromUTF8(t),y.fromHex(e)]})}createWarpAliasSetTransaction(t,e){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"setWarpAlias",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[y.fromHex(t),y.fromUTF8(e)]})}createBrandRegisterTransaction(t){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"registerBrand",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[y.fromHex(t)]})}createWarpPublishTransaction(t){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"publishWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[y.fromHex(t)]})}createWarpBrandingTransaction(t,e){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:m.newFromBech32(this.config.userAddress),contract:m.newFromBech32(this.getRegistryContractAddress()),function:"brandWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[y.fromHex(t),y.fromHex(e)]})}async getInfoByAlias(t,e){let r=C.RegistryInfo(t);if(e){let d=this.cache.get(r);if(d)return console.log(`WarpRegistry (getInfoByAlias): RegistryInfo found in cache: ${t}`),d}let i=this.getRegistryContractAddress(),n=this.getController(),s=n.createQuery({contract:i,function:"getInfoByAlias",arguments:[y.fromUTF8(t)]}),o=await n.runQuery(s),[c]=n.parseQueryResponse(o),p=c?v(c):null,l=p?.brand?await this.fetchBrand(p.brand):null;return e&&e.ttl&&this.cache.set(r,{registryInfo:p,brand:l},e.ttl),{registryInfo:p,brand:l}}async getInfoByHash(t,e){let r=C.RegistryInfo(t);if(e){let d=this.cache.get(r);if(d)return console.log(`WarpRegistry (getInfoByHash): RegistryInfo found in cache: ${t}`),d}let i=this.getRegistryContractAddress(),n=this.getController(),s=n.createQuery({contract:i,function:"getInfoByHash",arguments:[y.fromHex(t)]}),o=await n.runQuery(s),[c]=n.parseQueryResponse(o),p=c?v(c):null,l=p?.brand?await this.fetchBrand(p.brand):null;return e&&e.ttl&&this.cache.set(r,{registryInfo:p,brand:l},e.ttl),{registryInfo:p,brand:l}}async getUserWarpRegistryInfos(t){let e=t||this.config.userAddress;if(!e)throw new Error("WarpRegistry: user address not set");let r=this.getRegistryContractAddress(),i=this.getController(),n=i.createQuery({contract:r,function:"getUserWarps",arguments:[new Y(new m(e))]}),s=await i.runQuery(n),[o]=i.parseQueryResponse(s);return o.map(v)}async getUserBrands(t){let e=t||this.config.userAddress;if(!e)throw new Error("WarpRegistry: user address not set");let r=this.getRegistryContractAddress(),i=this.getController(),n=i.createQuery({contract:r,function:"getUserBrands",arguments:[new Y(new m(e))]}),s=await i.runQuery(n),[o]=i.parseQueryResponse(s),c=o.map(d=>d.toString("hex")),p={ttl:365*24*60*60};return(await Promise.all(c.map(d=>this.fetchBrand(d,p)))).filter(d=>d!==null)}async fetchBrand(t,e){let r=C.Brand(t);if(e){let n=this.cache.get(r);if(n)return console.log(`WarpRegistry (fetchBrand): Brand found in cache: ${t}`),n}let i=f.getConfiguredChainApi(this.config);try{let n=await i.getTransaction(t),s=JSON.parse(n.data.toString());return s.meta={hash:n.hash,creator:n.sender.bech32(),createdAt:new Date(n.timestamp*1e3).toISOString()},e&&e.ttl&&this.cache.set(r,s,e.ttl),s}catch(n){return console.error("WarpRegistry: Error fetching brand from transaction hash",n),null}}getRegistryContractAddress(){return this.config.registryContract||g.Registry.Contract(this.config.env)}async loadRegistryConfigs(){let t=this.getRegistryContractAddress(),e=this.getController(),r=e.createQuery({contract:t,function:"getConfig",arguments:[]}),i=await e.runQuery(r),[n]=e.parseQueryResponse(i),s=BigInt(n.toString());this.unitPrice=s}getFactory(){let t=new Ht({chainID:T(this.config.env)}),e=X.create(N);return new Qt({config:t,abi:e})}getController(){let t=f.getConfiguredChainApi(this.config),e=new Dt({networkProvider:t}),r=X.create(N);return new _t({queryRunner:e,abi:r})}};var P=class{constructor(t){this.config=t;this.config=t}isValid(t){return t.startsWith(u.HttpProtocolPrefix)?!!this.extractIdentifierInfoFromUrl(t):!1}async detectFromHtml(t){if(!t.length)return{match:!1,results:[]};let i=[...t.matchAll(/https?:\/\/[^\s"'<>]+/gi)].map(p=>p[0]).filter(p=>this.isValid(p)).map(p=>this.detect(p)),s=(await Promise.all(i)).filter(p=>p.match),o=s.length>0,c=s.map(p=>({url:p.url,warp:p.warp}));return{match:o,results:c}}async detect(t){let e=t.startsWith(u.HttpProtocolPrefix)?this.extractIdentifierInfoFromUrl(t):f.getInfoFromPrefixedIdentifier(t);if(!e)return{match:!1,url:t,warp:null,registryInfo:null,brand:null};let{type:r,id:i}=e,n=new S(this.config),s=new V(this.config),o=null,c=null,p=null;if(r==="hash"){o=await n.createFromTransactionHash(i);try{let{registryInfo:l,brand:d}=await s.getInfoByHash(i);c=l,p=d}catch{}}else if(r==="alias"){let{registryInfo:l,brand:d}=await s.getInfoByAlias(i);c=l,p=d,l&&(o=await n.createFromTransactionHash(l.hash))}return o?{match:!0,url:t,warp:o,registryInfo:c,brand:p}:{match:!1,url:t,warp:null,registryInfo:null,brand:null}}build(t,e){let r=this.config.clientUrl||g.DefaultClientUrl(this.config.env),i=t===u.DefaultIdentifierType?encodeURIComponent(e):encodeURIComponent(t+u.IdentifierParamSeparator+e);return g.SuperClientUrls.includes(r)?`${r}/${i}`:`${r}?${u.IdentifierParamName}=${i}`}generateQrCode(t,e,r=512,i="white",n="black",s="#23F7DD"){let o=this.build(t,e);return new jt({type:"svg",width:r,height:r,data:String(o),margin:16,qrOptions:{typeNumber:0,mode:"Byte",errorCorrectionLevel:"Q"},backgroundOptions:{color:i},dotsOptions:{type:"extra-rounded",color:n},cornersSquareOptions:{type:"extra-rounded",color:n},cornersDotOptions:{type:"square",color:n},imageOptions:{hideBackgroundDots:!0,imageSize:.4,margin:8},image:`data:image/svg+xml;utf8,<svg width="16" height="16" viewBox="0 0 100 100" fill="${encodeURIComponent(s)}" xmlns="http://www.w3.org/2000/svg"><path d="M54.8383 50.0242L95 28.8232L88.2456 16L51.4717 30.6974C50.5241 31.0764 49.4759 31.0764 48.5283 30.6974L11.7544 16L5 28.8232L45.1616 50.0242L5 71.2255L11.7544 84.0488L48.5283 69.351C49.4759 68.9724 50.5241 68.9724 51.4717 69.351L88.2456 84.0488L95 71.2255L54.8383 50.0242Z"/></svg>`})}extractIdentifierInfoFromUrl(t){let e=new URL(t),r=g.SuperClientUrls.includes(e.origin),i=e.searchParams.get(u.IdentifierParamName),n=r&&!i?e.pathname.split("/")[1]:i;if(!n)return null;let s=decodeURIComponent(n);return f.getInfoFromPrefixedIdentifier(s)}};var zt="https://",tt="query",et="env",f=class a{static prepareVars(t,e){if(!t?.vars)return t;let r=JSON.stringify(t),i=(n,s)=>{r=r.replace(new RegExp(`{{${n.toUpperCase()}}}`,"g"),s.toString())};return Object.entries(t.vars).forEach(([n,s])=>{if(typeof s=="string"&&s.startsWith(`${tt}:`)){if(!e.currentUrl)throw new Error("WarpUtils: currentUrl config is required to prepare vars");let o=s.split(`${tt}:`)[1],c=new URL(e.currentUrl).searchParams.get(o);c&&i(n,c)}else if(typeof s=="string"&&s.startsWith(`${et}:`)){let o=s.split(`${et}:`)[1],c=e.vars?.[o];c&&i(n,c)}else i(n,s)}),JSON.parse(r)}static getInfoFromPrefixedIdentifier(t){let e=decodeURIComponent(t),r=e.includes(u.IdentifierParamSeparator)?e:`${u.DefaultIdentifierType}${u.IdentifierParamSeparator}${e}`,[i,n]=r.split(u.IdentifierParamSeparator);return{type:i,id:n}}static getNextStepUrl(t,e){if(!t?.next)return null;if(t.next.startsWith(zt))return t.next;{let r=new P(e),i=a.getInfoFromPrefixedIdentifier(t.next);return i?r.build(i.type,i.id):null}}static getConfiguredChainApi(t){let e=t.chainApiUrl||g.Chain.ApiUrl(t.env);if(!e)throw new Error("WarpUtils: Chain API URL not configured");return new Mt(e,{timeout:3e4,clientName:"warp-sdk"})}};var nt=class{constructor(t){this.pendingBrand={protocol:B(g.ProtocolNameBrand),name:"",description:"",logo:""};this.config=t}createInscriptionTransaction(t){if(!this.config.userAddress)throw new Error("BrandBuilder: user address not set");let e=new Gt({chainID:T(this.config.env)}),r=new Kt({config:e}),i=JSON.stringify(t);return r.createTransactionForNativeTokenTransfer({sender:rt.newFromBech32(this.config.userAddress),receiver:rt.newFromBech32(this.config.userAddress),nativeAmount:BigInt(0),data:Buffer.from(i).valueOf()})}async createFromRaw(t,e=!0){let r=JSON.parse(t);return e&&await this.ensureValidSchema(r),r}async createFromTransaction(t,e=!1){return await this.createFromRaw(t.data.toString(),e)}async createFromTransactionHash(t){let e=f.getConfiguredChainApi(this.config);try{let r=await e.getTransaction(t);return this.createFromTransaction(r)}catch(r){return console.error("BrandBuilder: Error creating from transaction hash",r),null}}setName(t){return this.pendingBrand.name=t,this}setDescription(t){return this.pendingBrand.description=t,this}setLogo(t){return this.pendingBrand.logo=t,this}setUrls(t){return this.pendingBrand.urls=t,this}setColors(t){return this.pendingBrand.colors=t,this}setCta(t){return this.pendingBrand.cta=t,this}async build(){return this.ensure(this.pendingBrand.name,"name is required"),this.ensure(this.pendingBrand.description,"description is required"),this.ensure(this.pendingBrand.logo,"logo is required"),await this.ensureValidSchema(this.pendingBrand),this.pendingBrand}ensure(t,e){if(!t)throw new Error(`Warp: ${e}`)}async ensureValidSchema(t){let e=this.config.brandSchemaUrl||g.LatestBrandSchemaUrl,i=await(await fetch(e)).json(),n=new Jt,s=n.compile(i);if(!s(t))throw new Error(`BrandBuilder: schema validation failed: ${n.errorsText(s.errors)}`)}};import{Address as Zt,AddressValue as Xt,BigUIntType as Yt,BigUIntValue as it,BooleanValue as te,BytesValue as ee,CodeMetadata as re,CodeMetadataValue as ne,CompositeType as ie,CompositeValue as se,Field as k,FieldDefinition as $,List as ae,NothingValue as oe,OptionalValue as O,OptionValue as L,StringValue as ce,Struct as pe,StructType as ue,TokenIdentifierType as le,TokenIdentifierValue as st,U16Value as de,U32Value as ge,U64Type as fe,U64Value as at,U8Value as me,VariadicValue as he}from"@multiversx/sdk-core/out";var Vr=(a,t)=>a?L.newProvided(a):t?L.newMissingTyped(t):L.newMissing(),Pr=(a,t)=>a?new O(a.getType(),a):t?new O(t):O.newMissing(),Rr=a=>{if(a.length===0)throw new Error("Cannot create a list from an empty array");let t=a[0].getType();return new ae(t,a)},Ur=a=>he.fromItems(...a),Fr=a=>{let t=a.map(e=>e.getType());return new se(new ie(...t),a)},Er=a=>ce.fromUTF8(a),Nr=a=>new me(a),kr=a=>new de(a),$r=a=>new ge(a),Or=a=>new at(a),Lr=a=>new it(BigInt(a)),qr=a=>new te(a),Dr=a=>new Xt(Zt.newFromBech32(a)),_r=a=>new st(a),Qr=a=>ee.fromHex(a),Hr=a=>new pe(new ue("EsdtTokenPayment",[new $("token_identifier","",new le),new $("token_nonce","",new fe),new $("amount","",new Yt)]),[new k(new st(a.token.identifier),"token_identifier"),new k(new at(BigInt(a.token.nonce)),"token_nonce"),new k(new it(BigInt(a.amount)),"amount")]),jr=a=>new ne(re.fromBuffer(Buffer.from(a,"hex"))),Mr=()=>new oe;import{AbiRegistry as Rt,Address as Ut,QueryRunnerAdapter as Ie,ResultsParser as be,SmartContractQueriesController as Be,SmartContractTransactionsFactory as ve,StringValue as xe,Token as Se,TokenComputer as Ve,TokenTransfer as Ft,TransactionsFactoryConfig as Pe,TransferTransactionsFactory as Re}from"@multiversx/sdk-core/out";var ye=[{id:"EGLD",name:"eGold",decimals:18},{id:"EGLD-000000",name:"eGold",decimals:18}],ot=a=>ye.find(t=>t.id===a)||null;import{Address as we,AddressType as ct,AddressValue as pt,BigUIntType as q,BigUIntValue as D,BooleanType as ut,BooleanValue as lt,BytesType as dt,BytesValue as gt,CodeMetadata as Te,CodeMetadataType as ft,CodeMetadataValue as mt,CompositeType as ht,CompositeValue as yt,Field as _,FieldDefinition as Q,List as wt,NothingValue as w,OptionalValue as H,OptionValue as j,StringType as Tt,StringValue as Wt,Struct as We,StructType as Ct,Token as Ce,TokenIdentifierType as M,TokenIdentifierValue as z,TokenTransfer as At,U16Type as It,U16Value as bt,U32Type as Bt,U32Value as vt,U64Type as G,U64Value as K,U8Type as xt,U8Value as St,VariadicType as Ae,VariadicValue as Vt}from"@multiversx/sdk-core/out";var Pt=new RegExp(`${u.ArgParamsSeparator}(.*)`),R=class{nativeToString(t,e){return t==="esdt"&&e instanceof At?`esdt:${e.token.identifier}|${e.token.nonce.toString()}|${e.amount.toString()}`:`${t}:${e?.toString()??""}`}typedToString(t){if(t.hasClassOrSuperclass(j.ClassName))return t.isSet()?`option:${this.typedToString(t.getTypedValue())}`:"option:null";if(t.hasClassOrSuperclass(H.ClassName))return t.isSet()?`optional:${this.typedToString(t.getTypedValue())}`:"optional:null";if(t.hasClassOrSuperclass(wt.ClassName)){let e=t.getItems(),i=e.map(s=>this.typedToString(s).split(u.ArgParamsSeparator)[0])[0],n=e.map(s=>this.typedToString(s).split(u.ArgParamsSeparator)[1]);return`list:${i}:${n.join(",")}`}if(t.hasClassOrSuperclass(Vt.ClassName)){let e=t.getItems(),i=e.map(s=>this.typedToString(s).split(u.ArgParamsSeparator)[0])[0],n=e.map(s=>this.typedToString(s).split(u.ArgParamsSeparator)[1]);return`variadic:${i}:${n.join(",")}`}if(t.hasClassOrSuperclass(yt.ClassName)){let e=t.getItems(),r=e.map(o=>this.typedToString(o).split(u.ArgParamsSeparator)[0]),i=e.map(o=>this.typedToString(o).split(u.ArgParamsSeparator)[1]),n=r.join(u.ArgCompositeSeparator),s=i.join(u.ArgCompositeSeparator);return`composite(${n}):${s}`}if(t.hasClassOrSuperclass(D.ClassName)||t.getType().getName()==="BigUint")return`biguint:${BigInt(t.valueOf().toFixed())}`;if(t.hasClassOrSuperclass(St.ClassName))return`uint8:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(bt.ClassName))return`uint16:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(vt.ClassName))return`uint32:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(K.ClassName))return`uint64:${BigInt(t.valueOf().toFixed())}`;if(t.hasClassOrSuperclass(Wt.ClassName))return`string:${t.valueOf()}`;if(t.hasClassOrSuperclass(lt.ClassName))return`bool:${t.valueOf()}`;if(t.hasClassOrSuperclass(pt.ClassName))return`address:${t.valueOf().bech32()}`;if(t.hasClassOrSuperclass(z.ClassName))return`token:${t.valueOf()}`;if(t.hasClassOrSuperclass(gt.ClassName))return`hex:${t.valueOf().toString("hex")}`;if(t.hasClassOrSuperclass(mt.ClassName))return`codemeta:${t.valueOf().toBuffer().toString("hex")}`;if(t.getType().getName()==="EsdtTokenPayment"){let e=t.getFieldValue("token_identifier").valueOf(),r=t.getFieldValue("token_nonce").valueOf(),i=t.getFieldValue("amount").valueOf();return`esdt:${e}|${r}|${i}`}throw new Error(`WarpArgSerializer (typedToString): Unsupported input type: ${t.getClassName()}`)}typedToNative(t){let e=this.typedToString(t);return this.stringToNative(e)}nativeToTyped(t,e){let r=this.nativeToString(t,e);return this.stringToTyped(r)}nativeToType(t){if(t.startsWith("composite")){let e=t.match(/\(([^)]+)\)/)?.[1];return new ht(...e.split(u.ArgCompositeSeparator).map(r=>this.nativeToType(r)))}if(t==="string")return new Tt;if(t==="uint8")return new xt;if(t==="uint16")return new It;if(t==="uint32")return new Bt;if(t==="uint64")return new G;if(t==="biguint")return new q;if(t==="bool")return new ut;if(t==="address")return new ct;if(t==="token")return new M;if(t==="hex")return new dt;if(t==="codemeta")return new ft;if(t==="esdt"||t==="nft")return new Ct("EsdtTokenPayment",[new Q("token_identifier","",new M),new Q("token_nonce","",new G),new Q("amount","",new q)]);throw new Error(`WarpArgSerializer (nativeToType): Unsupported input type: ${t}`)}stringToNative(t){let e=t.split(u.ArgParamsSeparator),r=e[0],i=e.slice(1).join(u.ArgParamsSeparator);if(r==="null")return[r,null];if(r==="option"){let[n,s]=i.split(u.ArgParamsSeparator);return[`option:${n}`,s||null]}else if(r==="optional"){let[n,s]=i.split(u.ArgParamsSeparator);return[`optional:${n}`,s||null]}else if(r==="list"){let n=i.split(u.ArgParamsSeparator),s=n.slice(0,-1).join(u.ArgParamsSeparator),o=n[n.length-1],p=(o?o.split(","):[]).map(l=>this.stringToNative(`${s}:${l}`)[1]);return[`list:${s}`,p]}else if(r==="variadic"){let n=i.split(u.ArgParamsSeparator),s=n.slice(0,-1).join(u.ArgParamsSeparator),o=n[n.length-1],p=(o?o.split(","):[]).map(l=>this.stringToNative(`${s}:${l}`)[1]);return[`variadic:${s}`,p]}else if(r.startsWith("composite")){let n=r.match(/\(([^)]+)\)/)?.[1]?.split(u.ArgCompositeSeparator),o=i.split(u.ArgCompositeSeparator).map((c,p)=>this.stringToNative(`${n[p]}:${c}`)[1]);return[r,o]}else{if(r==="string")return[r,i];if(r==="uint8"||r==="uint16"||r==="uint32")return[r,Number(i)];if(r==="uint64"||r==="biguint")return[r,BigInt(i||0)];if(r==="bool")return[r,i==="true"];if(r==="address")return[r,i];if(r==="token")return[r,i];if(r==="hex")return[r,i];if(r==="codemeta")return[r,i];if(r==="esdt"){let[n,s,o]=i.split(u.ArgCompositeSeparator);return[r,new At({token:new Ce({identifier:n,nonce:BigInt(s)}),amount:BigInt(o)})]}}throw new Error(`WarpArgSerializer (stringToNative): Unsupported input type: ${r}`)}stringToTyped(t){let[e,r]=t.split(/:(.*)/,2);if(e==="null"||e===null)return new w;if(e==="option"){let i=this.stringToTyped(r);return i instanceof w?j.newMissingTyped(i.getType()):j.newProvided(i)}if(e==="optional"){let i=this.stringToTyped(r);return i instanceof w?H.newMissing():new H(i.getType(),i)}if(e==="list"){let[i,n]=r.split(Pt,2),o=n.split(",").map(c=>this.stringToTyped(`${i}:${c}`));return new wt(this.nativeToType(i),o)}if(e==="variadic"){let[i,n]=r.split(Pt,2),o=n.split(",").map(c=>this.stringToTyped(`${i}:${c}`));return new Vt(new Ae(this.nativeToType(i)),o)}if(e.startsWith("composite")){let i=e.match(/\(([^)]+)\)/)?.[1],n=r.split(u.ArgCompositeSeparator),s=i.split(u.ArgCompositeSeparator),o=n.map((p,l)=>this.stringToTyped(`${s[l]}:${p}`)),c=o.map(p=>p.getType());return new yt(new ht(...c),o)}if(e==="string")return r?Wt.fromUTF8(r):new w;if(e==="uint8")return r?new St(Number(r)):new w;if(e==="uint16")return r?new bt(Number(r)):new w;if(e==="uint32")return r?new vt(Number(r)):new w;if(e==="uint64")return r?new K(BigInt(r)):new w;if(e==="biguint")return r?new D(BigInt(r)):new w;if(e==="bool")return r?new lt(typeof r=="boolean"?r:r==="true"):new w;if(e==="address")return r?new pt(we.newFromBech32(r)):new w;if(e==="token")return r?new z(r):new w;if(e==="hex")return r?gt.fromHex(r):new w;if(e==="codemeta")return new mt(Te.fromBuffer(Buffer.from(r,"hex")));if(e==="esdt"){let i=r.split(u.ArgCompositeSeparator);return new We(this.nativeToType("esdt"),[new _(new z(i[0]),"token_identifier"),new _(new K(BigInt(i[1])),"token_nonce"),new _(new D(BigInt(i[2])),"amount")])}throw new Error(`WarpArgSerializer (stringToTyped): Unsupported input type: ${e}`)}typeToNative(t){if(t instanceof Tt)return"string";if(t instanceof xt)return"uint8";if(t instanceof It)return"uint16";if(t instanceof Bt)return"uint32";if(t instanceof G)return"uint64";if(t instanceof q)return"biguint";if(t instanceof ut)return"bool";if(t instanceof ct)return"address";if(t instanceof M)return"token";if(t instanceof dt)return"hex";if(t instanceof ft)return"codemeta";if(t instanceof Ct&&t.getClassName()==="EsdtTokenPayment")return"esdt";throw new Error(`WarpArgSerializer (typeToNative): Unsupported input type: ${t.getClassName()}`)}};var U=class{constructor(t){this.config=t}async getContract(t){try{let r=await f.getConfiguredChainApi(this.config).doGetGeneric(`accounts/${t}/verification`);return{address:t,owner:r.ownerAddress,verified:r.isVerified}}catch(e){return console.error("WarpContractLoader: getContract error",e),null}}async getVerificationInfo(t){try{let r=await f.getConfiguredChainApi(this.config).doGetGeneric(`accounts/${t}/verification`);return{codeHash:r.codeHash,abi:r.source.abi}}catch(e){return console.error("WarpContractLoader: getVerificationInfo error",e),null}}};var Et=class{constructor(t){if(!t.currentUrl)throw new Error("WarpActionExecutor: currentUrl config not set");this.config=t,this.url=new URL(t.currentUrl),this.serializer=new R,this.contractLoader=new U(t)}async createTransactionForExecute(t,e){if(!this.config.userAddress)throw new Error("WarpActionExecutor: user address not set");let r=Ut.newFromBech32(this.config.userAddress),i=new Pe({chainID:T(this.config.env)}),{destination:n,args:s,value:o,transfers:c}=await this.getTxComponentsFromInputs(t,e,r),p=s.map(l=>this.serializer.stringToTyped(l));return n.isContractAddress()?new ve({config:i}).createTransactionForExecute({sender:r,contract:n,function:"func"in t&&t.func||"",gasLimit:"gasLimit"in t?BigInt(t.gasLimit||0):0n,arguments:p,tokenTransfers:c,nativeTransferAmount:o}):new Re({config:i}).createTransactionForTransfer({sender:r,receiver:n,nativeAmount:o,tokenTransfers:c,data:p[0]?.hasExactClass(xe.ClassName)?p[0].valueOf():void 0})}async executeQuery(t,e){if(!this.config.chainApiUrl)throw new Error("WarpActionExecutor: Chain API URL not set");if(!t.func)throw new Error("WarpActionExecutor: Function not found");let r=f.getConfiguredChainApi(this.config),i=new Ie({networkProvider:r}),n=await this.getAbiForAction(t),{args:s}=await this.getTxComponentsFromInputs(t,e),o=s.map(h=>this.serializer.stringToTyped(h)),c=new Be({queryRunner:i,abi:n}),p=c.createQuery({contract:t.address,function:t.func,arguments:o}),l=await c.runQuery(p),d=new be,I={returnCode:l.returnCode,returnMessage:l.returnMessage,getReturnDataParts:()=>l.returnDataParts.map(h=>Buffer.from(h))},F=l.function,E=n.getEndpoint(F),b=d.parseQueryResponse(I,E).firstValue;if(!b)throw new Error("WarpActionExecutor: Query result not found");return b}async executeCollect(t,e,r){let i=new Headers;i.set("Content-Type","application/json"),i.set("Accept","application/json"),Object.entries(t.destination.headers).forEach(([n,s])=>{i.set(n,s)}),await fetch(t.destination.url,{method:t.destination.method,headers:i,body:JSON.stringify({inputs:e,meta:r})})}async getTxComponentsFromInputs(t,e,r){let i=await this.getResolvedInputs(t,e),n=this.getModifiedInputs(i),s=n.find(h=>h.input.position==="receiver")?.value,o="address"in t?t.address:null,c=s?.split(":")[1]||o||r?.toBech32();if(!c)throw new Error("WarpActionExecutor: Destination/Receiver not provided");let p=Ut.newFromBech32(c),l=this.getPreparedArgs(t,n),d=n.find(h=>h.input.position==="value")?.value||null,I="value"in t?t.value:null,F=BigInt(d?.split(":")[1]||I||0),E=n.filter(h=>h.input.position==="transfer"&&h.value).map(h=>h.value),b=[...("transfers"in t?t.transfers:[])?.map(this.toTypedTransfer)||[],...E?.map(h=>this.serializer.stringToNative(h)[1])||[]];return{destination:p,args:l,value:F,transfers:b}}getModifiedInputs(t){return t.map((e,r)=>{if(e.input.modifier?.startsWith("scale:")){let[,i]=e.input.modifier.split(":");if(isNaN(Number(i))){let n=Number(t.find(c=>c.input.name===i)?.value?.split(":")[1]);if(!n)throw new Error(`WarpActionExecutor: Exponent value not found for input ${i}`);let s=e.value?.split(":")[1];if(!s)throw new Error("WarpActionExecutor: Scalable value not found");let o=x(s,+n);return{...e,value:`${e.input.type}:${o}`}}else{let n=e.value?.split(":")[1];if(!n)throw new Error("WarpActionExecutor: Scalable value not found");let s=x(n,+i);return{...e,value:`${e.input.type}:${s}`}}}else return e})}async getResolvedInputs(t,e){let r=t.inputs||[],i=await Promise.all(e.map(s=>this.preprocessInput(s))),n=(s,o)=>s.source==="query"?this.serializer.nativeToString(s.type,this.url.searchParams.get(s.name)||""):i[o]||null;return r.map((s,o)=>({input:s,value:n(s,o)}))}async preprocessInput(t){try{let[e,r]=this.serializer.stringToNative(t);if(e==="esdt"){let[,,,i]=t.split(u.ArgCompositeSeparator);if(i)return t;let n=r;if(!new Ve().isFungible(n.token))return t;let c=ot(n.token.identifier)?.decimals;if(!c){let l=this.config.chainApiUrl||g.Chain.ApiUrl(this.config.env);c=(await(await fetch(`${l}/tokens/${n.token.identifier}`)).json()).decimals}if(!c)throw new Error(`WarpActionExecutor: Decimals not found for token ${n.token.identifier}`);let p=new Ft({token:n.token,amount:x(n.amount,c)});return this.serializer.nativeToString(e,p)+u.ArgCompositeSeparator+c}return t}catch{return t}}getPreparedArgs(t,e){let r="args"in t?t.args||[]:[];return e.forEach(({input:i,value:n})=>{if(!n||!i.position.startsWith("arg:"))return;let s=Number(i.position.split(":")[1])-1;r.splice(s,0,n)}),r}async getAbiForAction(t){if(t.abi)return await this.fetchAbi(t);let e=await this.contractLoader.getVerificationInfo(t.address);if(!e)throw new Error("WarpActionExecutor: Verification info not found");return Rt.create(e.abi)}async fetchAbi(t){if(!t.abi)throw new Error("WarpActionExecutor: ABI not found");let r=await(await fetch(t.abi)).json();return Rt.create(r)}toTypedTransfer(t){return new Ft({token:new Se({identifier:t.token,nonce:BigInt(t.nonce||0)}),amount:BigInt(t.amount||0)})}};var Nt=class{constructor(t){this.config=t}async search(t){if(!this.config.indexUrl)throw new Error("WarpIndex: Index URL is not set");try{let e=await fetch(this.config.indexUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.indexApiKey}`},body:JSON.stringify({[this.config.indexSearchParamName||"search"]:t})});if(!e.ok)throw new Error(`WarpIndex: search failed with status ${e.status}`);return(await e.json()).hits}catch(e){throw console.error("WarpIndex: Error searching for warps: ",e),e}}};export{nt as BrandBuilder,g as Config,Et as WarpActionExecutor,R as WarpArgSerializer,S as WarpBuilder,u as WarpConstants,U as WarpContractLoader,Nt as WarpIndex,P as WarpLink,V as WarpRegistry,f as WarpUtils,Dr as address,Lr as biguint,qr as boolean,jr as codemeta,Fr as composite,Hr as esdt,T as getChainId,B as getLatestProtocolIdentifier,Ee as getWarpActionByIndex,Qr as hex,Rr as list,Mr as nothing,Vr as option,Pr as optional,x as shiftBigintBy,Er as string,J as toPreviewText,v as toTypedRegistryInfo,_r as token,kr as u16,$r as u32,Or as u64,Nr as u8,Ur as variadic};
